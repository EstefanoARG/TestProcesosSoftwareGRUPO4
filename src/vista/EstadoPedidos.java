/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

/**
 *
 * @author Andrey
 */

import Modelo.DetallePedido;
import Modelo.Pedido;
import Modelo.Producto;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class EstadoPedidos extends javax.swing.JPanel {

    private List<Pedido> pedidos;
    private DefaultTableModel tableModel;

    public EstadoPedidos() {
        initComponents();
        pedidos = cargarPedidosDesdeArchivo("HistorialPedidos.txt");
        configurarTablaPedidos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePedidos = new javax.swing.JTable();
        jButtonEntregarPedido = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDetallesPedido = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(221, 221, 221));

        jTablePedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTablePedidos);

        jButtonEntregarPedido.setText("Entregar pedido");

        jTextAreaDetallesPedido.setColumns(20);
        jTextAreaDetallesPedido.setRows(5);
        jScrollPane2.setViewportView(jTextAreaDetallesPedido);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jButtonEntregarPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonEntregarPedido)
                        .addGap(79, 79, 79)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEntregarPedido;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePedidos;
    private javax.swing.JTextArea jTextAreaDetallesPedido;
    // End of variables declaration//GEN-END:variables

 private void configurarTablaPedidos() {
        tableModel = new DefaultTableModel(new Object[]{"ID", "Total", "Estado"}, 0);
        jTablePedidos.setModel(tableModel);
        actualizarTabla();

        jTablePedidos.getSelectionModel().addListSelectionListener(e -> mostrarDetallesPedido());
    }

    private void actualizarTabla() {
        tableModel.setRowCount(0);
        for (Pedido pedido : pedidos) {
            tableModel.addRow(new Object[]{pedido.getId(), pedido.getTotal(), pedido.getEstado()});
        }
    }

    private List<Pedido> cargarPedidosDesdeArchivo(String filePath) {
        List<Pedido> listaPedidos = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String linea;
            Pedido pedido = null;
            while ((linea = br.readLine()) != null) {
                if (linea.startsWith("Pedido ID: ")) {
                    String id = linea.replace("Pedido ID: ", "").trim();
                    pedido = new Pedido(id);
                } else if (linea.startsWith("Producto: ")) {
                    if (pedido != null) {
                        String[] partes = linea.split(", ");
                        String nombreProducto = partes[0].replace("Producto: ", "").trim();
                        int cantidad = Integer.parseInt(partes[1].replace("Cantidad: ", "").trim());
                        double precioUnitario = Double.parseDouble(partes[2].replace("Precio Unitario: $", "").trim());
                        Producto producto = new Producto("", nombreProducto, precioUnitario, "");
                        DetallePedido detalle = new DetallePedido(producto, cantidad);
                        pedido.agregarDetalle(detalle);
                    }
                } else if (linea.startsWith("Total: ")) {
                    if (pedido != null) {
                        String[] partes = linea.split(", Estado: ");
                        pedido.setEstado(partes[1].trim());
                        pedido.actualizarTotal();
                        listaPedidos.add(pedido);
                    }
                } else {
                    System.err.println("Formato de línea no válido: " + linea);
                }
            }
        } catch (IOException e) {
            System.err.println("Error al cargar pedidos: " + e.getMessage());
        }
        return listaPedidos;
    }


    private Pedido parsePedidoDesdeLinea(String linea) {
        // Extraer el ID y los detalles del pedido
        String[] lineas = linea.split("\n");
        String id = lineas[0].replace("Pedido ID: ", "").trim();

        Pedido pedido = new Pedido(id);
        for (int i = 1; i < lineas.length - 1; i++) {
            String detalleStr = lineas[i];
            String[] detallePartes = detalleStr.split(" - ");
            if (detallePartes.length >= 2) {
                String nombreProducto = detallePartes[0].split(" x")[0].trim();
                int cantidad = Integer.parseInt(detallePartes[0].split(" x")[1].trim());
                double subtotal = Double.parseDouble(detallePartes[1].replace("$", "").trim());

                Producto producto = new Producto("", nombreProducto, subtotal / cantidad, ""); // Sin ID ni categoría
                DetallePedido detalle = new DetallePedido(producto, cantidad);
                pedido.agregarDetalle(detalle);
            }
        }

        // Actualizar el total desde la última línea de la descripción
        String totalStr = lineas[lineas.length - 1].replace("Total: ", "").trim();
        pedido.actualizarTotal();

        return pedido;
    }

    private void mostrarDetallesPedido() {
        int filaSeleccionada = jTablePedidos.getSelectedRow();
        if (filaSeleccionada != -1) {
            Pedido pedido = pedidos.get(filaSeleccionada);
            jTextAreaDetallesPedido.setText(pedido.toString());
        }
    }
    
    private void eliminarPedido(Pedido pedido) {
        pedidos.remove(pedido);
        actualizarArchivo();
        actualizarTabla();
    }
    
    private void entregarPedido() {
        int filaSeleccionada = jTablePedidos.getSelectedRow();
        if (filaSeleccionada != -1) {
            Pedido pedido = pedidos.get(filaSeleccionada);
            int confirmado = JOptionPane.showConfirmDialog(this, 
                "¿Desea marcar el pedido como entregado?", "Confirmar Entrega", JOptionPane.YES_NO_OPTION);
            if (confirmado == JOptionPane.YES_OPTION) {
                eliminarPedido(pedido); // Llama al método para eliminar el pedido y actualizar
                JOptionPane.showMessageDialog(this, "Pedido entregado y eliminado del sistema.");
            }
        }
    }

    private void actualizarArchivo() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("HistorialPedidos.txt"))) {
            for (Pedido pedido : pedidos) {
                pedido.guardarEnArchivo("HistorialPedidos.txt");
            }
        } catch (IOException e) {
            System.err.println("Error al actualizar archivo de pedidos: " + e.getMessage());
        }
    }
}
